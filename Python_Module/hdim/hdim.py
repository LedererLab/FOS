# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hdim', [dirname(__file__)])
        except ImportError:
            import _hdim
            return _hdim
        if fp is not None:
            try:
                _mod = imp.load_module('_hdim', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _hdim = swig_import_helper()
    del swig_import_helper
else:
    import _hdim
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_hdim.SolverType_ista_swigconstant(_hdim)
SolverType_ista = _hdim.SolverType_ista

_hdim.SolverType_screen_ista_swigconstant(_hdim)
SolverType_screen_ista = _hdim.SolverType_screen_ista

_hdim.SolverType_fista_swigconstant(_hdim)
SolverType_fista = _hdim.SolverType_fista

_hdim.SolverType_screen_fista_swigconstant(_hdim)
SolverType_screen_fista = _hdim.SolverType_screen_fista

_hdim.SolverType_cd_swigconstant(_hdim)
SolverType_cd = _hdim.SolverType_cd

_hdim.SolverType_screen_cd_swigconstant(_hdim)
SolverType_screen_cd = _hdim.SolverType_screen_cd
class AbstractSolver_f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractSolver_f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractSolver_f, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdim.delete_AbstractSolver_f
    __del__ = lambda self: None

    def __call__(self, *args):
        return _hdim.AbstractSolver_f___call__(self, *args)
AbstractSolver_f_swigregister = _hdim.AbstractSolver_f_swigregister
AbstractSolver_f_swigregister(AbstractSolver_f)

class AbstractSolver_d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbstractSolver_d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbstractSolver_d, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdim.delete_AbstractSolver_d
    __del__ = lambda self: None

    def __call__(self, *args):
        return _hdim.AbstractSolver_d___call__(self, *args)
AbstractSolver_d_swigregister = _hdim.AbstractSolver_d_swigregister
AbstractSolver_d_swigregister(AbstractSolver_d)

class Solver_f(AbstractSolver_f):
    __swig_setmethods__ = {}
    for _s in [AbstractSolver_f]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solver_f, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractSolver_f]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Solver_f, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdim.delete_Solver_f
    __del__ = lambda self: None

    def __call__(self, *args):
        return _hdim.Solver_f___call__(self, *args)
Solver_f_swigregister = _hdim.Solver_f_swigregister
Solver_f_swigregister(Solver_f)

class Solver_d(AbstractSolver_d):
    __swig_setmethods__ = {}
    for _s in [AbstractSolver_d]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solver_d, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractSolver_d]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Solver_d, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdim.delete_Solver_d
    __del__ = lambda self: None

    def __call__(self, *args):
        return _hdim.Solver_d___call__(self, *args)
Solver_d_swigregister = _hdim.Solver_d_swigregister
Solver_d_swigregister(Solver_d)

class SRSolver_f(AbstractSolver_f):
    __swig_setmethods__ = {}
    for _s in [AbstractSolver_f]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SRSolver_f, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractSolver_f]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SRSolver_f, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdim.delete_SRSolver_f
    __del__ = lambda self: None

    def __call__(self, *args):
        return _hdim.SRSolver_f___call__(self, *args)
SRSolver_f_swigregister = _hdim.SRSolver_f_swigregister
SRSolver_f_swigregister(SRSolver_f)

class SRSolver_d(AbstractSolver_d):
    __swig_setmethods__ = {}
    for _s in [AbstractSolver_d]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SRSolver_d, name, value)
    __swig_getmethods__ = {}
    for _s in [AbstractSolver_d]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SRSolver_d, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdim.delete_SRSolver_d
    __del__ = lambda self: None

    def __call__(self, *args):
        return _hdim.SRSolver_d___call__(self, *args)
SRSolver_d_swigregister = _hdim.SRSolver_d_swigregister
SRSolver_d_swigregister(SRSolver_d)

class SGD(Solver_d):
    __swig_setmethods__ = {}
    for _s in [Solver_d]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGD, name, value)
    __swig_getmethods__ = {}
    for _s in [Solver_d]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SGD, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdim.delete_SGD
    __del__ = lambda self: None
SGD_swigregister = _hdim.SGD_swigregister
SGD_swigregister(SGD)

class SGD_SR(SRSolver_d):
    __swig_setmethods__ = {}
    for _s in [SRSolver_d]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGD_SR, name, value)
    __swig_getmethods__ = {}
    for _s in [SRSolver_d]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SGD_SR, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdim.delete_SGD_SR
    __del__ = lambda self: None
SGD_SR_swigregister = _hdim.SGD_SR_swigregister
SGD_SR_swigregister(SGD_SR)

class ISTA_SR(SGD_SR):
    __swig_setmethods__ = {}
    for _s in [SGD_SR]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISTA_SR, name, value)
    __swig_getmethods__ = {}
    for _s in [SGD_SR]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ISTA_SR, name)
    __repr__ = _swig_repr

    def __init__(self, L_0=0.1):
        this = _hdim.new_ISTA_SR(L_0)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hdim.delete_ISTA_SR
    __del__ = lambda self: None
ISTA_SR_swigregister = _hdim.ISTA_SR_swigregister
ISTA_SR_swigregister(ISTA_SR)

class FISTA_SR(SGD_SR):
    __swig_setmethods__ = {}
    for _s in [SGD_SR]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FISTA_SR, name, value)
    __swig_getmethods__ = {}
    for _s in [SGD_SR]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FISTA_SR, name)
    __repr__ = _swig_repr

    def __init__(self, Beta_0, L_0=0.1):
        this = _hdim.new_FISTA_SR(Beta_0, L_0)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hdim.delete_FISTA_SR
    __del__ = lambda self: None
FISTA_SR_swigregister = _hdim.FISTA_SR_swigregister
FISTA_SR_swigregister(FISTA_SR)

class CD(Solver_d):
    __swig_setmethods__ = {}
    for _s in [Solver_d]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CD, name, value)
    __swig_getmethods__ = {}
    for _s in [Solver_d]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CD, name)
    __repr__ = _swig_repr

    def __init__(self, X, Y, Beta_0):
        this = _hdim.new_CD(X, Y, Beta_0)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hdim.delete_CD
    __del__ = lambda self: None
CD_swigregister = _hdim.CD_swigregister
CD_swigregister(CD)

class CD_SR(SRSolver_d):
    __swig_setmethods__ = {}
    for _s in [SRSolver_d]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CD_SR, name, value)
    __swig_getmethods__ = {}
    for _s in [SRSolver_d]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CD_SR, name)
    __repr__ = _swig_repr

    def __init__(self, X, Y, Beta_0):
        this = _hdim.new_CD_SR(X, Y, Beta_0)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hdim.delete_CD_SR
    __del__ = lambda self: None
CD_SR_swigregister = _hdim.CD_SR_swigregister
CD_SR_swigregister(CD_SR)

class X_FOS_d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, X_FOS_d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, X_FOS_d, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hdim.new_X_FOS_d()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hdim.delete_X_FOS_d
    __del__ = lambda self: None

    def __call__(self, *args):
        return _hdim.X_FOS_d___call__(self, *args)

    def ReturnLambda(self):
        return _hdim.X_FOS_d_ReturnLambda(self)

    def ReturnIntercept(self):
        return _hdim.X_FOS_d_ReturnIntercept(self)

    def ReturnBetas(self):
        return _hdim.X_FOS_d_ReturnBetas(self)

    def ReturnOptimIndex(self):
        return _hdim.X_FOS_d_ReturnOptimIndex(self)

    def ReturnCoefficients(self):
        return _hdim.X_FOS_d_ReturnCoefficients(self)

    def ReturnSupport(self):
        return _hdim.X_FOS_d_ReturnSupport(self)
X_FOS_d_swigregister = _hdim.X_FOS_d_swigregister
X_FOS_d_swigregister(X_FOS_d)

class X_FOS_f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, X_FOS_f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, X_FOS_f, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hdim.new_X_FOS_f()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hdim.delete_X_FOS_f
    __del__ = lambda self: None

    def __call__(self, *args):
        return _hdim.X_FOS_f___call__(self, *args)

    def ReturnLambda(self):
        return _hdim.X_FOS_f_ReturnLambda(self)

    def ReturnIntercept(self):
        return _hdim.X_FOS_f_ReturnIntercept(self)

    def ReturnBetas(self):
        return _hdim.X_FOS_f_ReturnBetas(self)

    def ReturnOptimIndex(self):
        return _hdim.X_FOS_f_ReturnOptimIndex(self)

    def ReturnCoefficients(self):
        return _hdim.X_FOS_f_ReturnCoefficients(self)

    def ReturnSupport(self):
        return _hdim.X_FOS_f_ReturnSupport(self)
X_FOS_f_swigregister = _hdim.X_FOS_f_swigregister
X_FOS_f_swigregister(X_FOS_f)

# This file is compatible with both classic and new-style classes.



# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hdim', [dirname(__file__)])
        except ImportError:
            import _hdim
            return _hdim
        if fp is not None:
            try:
                _mod = imp.load_module('_hdim', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _hdim = swig_import_helper()
    del swig_import_helper
else:
    import _hdim
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_hdim.SolverType_ista_swigconstant(_hdim)
SolverType_ista = _hdim.SolverType_ista

_hdim.SolverType_screen_ista_swigconstant(_hdim)
SolverType_screen_ista = _hdim.SolverType_screen_ista

_hdim.SolverType_cl_ista_swigconstant(_hdim)
SolverType_cl_ista = _hdim.SolverType_cl_ista

_hdim.SolverType_fista_swigconstant(_hdim)
SolverType_fista = _hdim.SolverType_fista

_hdim.SolverType_screen_fista_swigconstant(_hdim)
SolverType_screen_fista = _hdim.SolverType_screen_fista

_hdim.SolverType_cl_fista_swigconstant(_hdim)
SolverType_cl_fista = _hdim.SolverType_cl_fista

_hdim.SolverType_cd_swigconstant(_hdim)
SolverType_cd = _hdim.SolverType_cd

_hdim.SolverType_screen_cd_swigconstant(_hdim)
SolverType_screen_cd = _hdim.SolverType_screen_cd
class baseSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, baseSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, baseSolver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdim.delete_baseSolver
    __del__ = lambda self: None

    def __call__(self, *args):
        return _hdim.baseSolver___call__(self, *args)
baseSolver_swigregister = _hdim.baseSolver_swigregister
baseSolver_swigregister(baseSolver)

class abstractSolver(baseSolver):
    __swig_setmethods__ = {}
    for _s in [baseSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, abstractSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [baseSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, abstractSolver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdim.delete_abstractSolver
    __del__ = lambda self: None
abstractSolver_swigregister = _hdim.abstractSolver_swigregister
abstractSolver_swigregister(abstractSolver)

class CL_abstractSolver(baseSolver):
    __swig_setmethods__ = {}
    for _s in [baseSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CL_abstractSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [baseSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CL_abstractSolver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdim.delete_CL_abstractSolver
    __del__ = lambda self: None

    def __call__(self, *args):
        return _hdim.CL_abstractSolver___call__(self, *args)
CL_abstractSolver_swigregister = _hdim.CL_abstractSolver_swigregister
CL_abstractSolver_swigregister(CL_abstractSolver)

class solver(abstractSolver):
    __swig_setmethods__ = {}
    for _s in [abstractSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, solver, name, value)
    __swig_getmethods__ = {}
    for _s in [abstractSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, solver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdim.delete_solver
    __del__ = lambda self: None

    def __call__(self, *args):
        return _hdim.solver___call__(self, *args)
solver_swigregister = _hdim.solver_swigregister
solver_swigregister(solver)

class CL_solver(CL_abstractSolver):
    __swig_setmethods__ = {}
    for _s in [CL_abstractSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CL_solver, name, value)
    __swig_getmethods__ = {}
    for _s in [CL_abstractSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CL_solver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdim.delete_CL_solver
    __del__ = lambda self: None

    def __call__(self, *args):
        return _hdim.CL_solver___call__(self, *args)
CL_solver_swigregister = _hdim.CL_solver_swigregister
CL_solver_swigregister(CL_solver)

class SR_solver(abstractSolver):
    __swig_setmethods__ = {}
    for _s in [abstractSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SR_solver, name, value)
    __swig_getmethods__ = {}
    for _s in [abstractSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SR_solver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdim.delete_SR_solver
    __del__ = lambda self: None

    def __call__(self, *args):
        return _hdim.SR_solver___call__(self, *args)
SR_solver_swigregister = _hdim.SR_solver_swigregister
SR_solver_swigregister(SR_solver)

class SGD(solver):
    __swig_setmethods__ = {}
    for _s in [solver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGD, name, value)
    __swig_getmethods__ = {}
    for _s in [solver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SGD, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdim.delete_SGD
    __del__ = lambda self: None
SGD_swigregister = _hdim.SGD_swigregister
SGD_swigregister(SGD)

class SGD_SR(SR_solver):
    __swig_setmethods__ = {}
    for _s in [SR_solver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGD_SR, name, value)
    __swig_getmethods__ = {}
    for _s in [SR_solver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SGD_SR, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdim.delete_SGD_SR
    __del__ = lambda self: None
SGD_SR_swigregister = _hdim.SGD_SR_swigregister
SGD_SR_swigregister(SGD_SR)

class CL_SGD(CL_solver):
    __swig_setmethods__ = {}
    for _s in [CL_solver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CL_SGD, name, value)
    __swig_getmethods__ = {}
    for _s in [CL_solver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CL_SGD, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdim.delete_CL_SGD
    __del__ = lambda self: None
CL_SGD_swigregister = _hdim.CL_SGD_swigregister
CL_SGD_swigregister(CL_SGD)

class ista(SGD):
    __swig_setmethods__ = {}
    for _s in [SGD]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ista, name, value)
    __swig_getmethods__ = {}
    for _s in [SGD]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ista, name)
    __repr__ = _swig_repr

    def __init__(self, L_0=0.1):
        this = _hdim.new_ista(L_0)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hdim.delete_ista
    __del__ = lambda self: None
ista_swigregister = _hdim.ista_swigregister
ista_swigregister(ista)

class screened_ista(SGD_SR):
    __swig_setmethods__ = {}
    for _s in [SGD_SR]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, screened_ista, name, value)
    __swig_getmethods__ = {}
    for _s in [SGD_SR]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, screened_ista, name)
    __repr__ = _swig_repr

    def __init__(self, L_0=0.1):
        this = _hdim.new_screened_ista(L_0)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hdim.delete_screened_ista
    __del__ = lambda self: None
screened_ista_swigregister = _hdim.screened_ista_swigregister
screened_ista_swigregister(screened_ista)

class CL_ista(CL_SGD):
    __swig_setmethods__ = {}
    for _s in [CL_SGD]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CL_ista, name, value)
    __swig_getmethods__ = {}
    for _s in [CL_SGD]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CL_ista, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdim.delete_CL_ista
    __del__ = lambda self: None
CL_ista_swigregister = _hdim.CL_ista_swigregister
CL_ista_swigregister(CL_ista)

class fista(SGD):
    __swig_setmethods__ = {}
    for _s in [SGD]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, fista, name, value)
    __swig_getmethods__ = {}
    for _s in [SGD]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, fista, name)
    __repr__ = _swig_repr

    def __init__(self, Beta_0, L_0=0.1):
        this = _hdim.new_fista(Beta_0, L_0)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hdim.delete_fista
    __del__ = lambda self: None
fista_swigregister = _hdim.fista_swigregister
fista_swigregister(fista)

class screened_fista(SGD_SR):
    __swig_setmethods__ = {}
    for _s in [SGD_SR]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, screened_fista, name, value)
    __swig_getmethods__ = {}
    for _s in [SGD_SR]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, screened_fista, name)
    __repr__ = _swig_repr

    def __init__(self, Beta_0, L_0=0.1):
        this = _hdim.new_screened_fista(Beta_0, L_0)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hdim.delete_screened_fista
    __del__ = lambda self: None
screened_fista_swigregister = _hdim.screened_fista_swigregister
screened_fista_swigregister(screened_fista)

class CL_fista(CL_SGD):
    __swig_setmethods__ = {}
    for _s in [CL_SGD]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CL_fista, name, value)
    __swig_getmethods__ = {}
    for _s in [CL_SGD]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CL_fista, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdim.delete_CL_fista
    __del__ = lambda self: None
CL_fista_swigregister = _hdim.CL_fista_swigregister
CL_fista_swigregister(CL_fista)

class CD(solver):
    __swig_setmethods__ = {}
    for _s in [solver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CD, name, value)
    __swig_getmethods__ = {}
    for _s in [solver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CD, name)
    __repr__ = _swig_repr

    def __init__(self, X, Y, Beta_0):
        this = _hdim.new_CD(X, Y, Beta_0)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hdim.delete_CD
    __del__ = lambda self: None
CD_swigregister = _hdim.CD_swigregister
CD_swigregister(CD)

class CD_SR(SR_solver):
    __swig_setmethods__ = {}
    for _s in [SR_solver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CD_SR, name, value)
    __swig_getmethods__ = {}
    for _s in [SR_solver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CD_SR, name)
    __repr__ = _swig_repr

    def __init__(self, X, Y, Beta_0):
        this = _hdim.new_CD_SR(X, Y, Beta_0)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hdim.delete_CD_SR
    __del__ = lambda self: None
CD_SR_swigregister = _hdim.CD_SR_swigregister
CD_SR_swigregister(CD_SR)

class fos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fos, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hdim.new_fos()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _hdim.delete_fos
    __del__ = lambda self: None

    def __call__(self, *args):
        return _hdim.fos___call__(self, *args)

    def ReturnLambda(self):
        return _hdim.fos_ReturnLambda(self)

    def ReturnIntercept(self):
        return _hdim.fos_ReturnIntercept(self)

    def ReturnBetas(self):
        return _hdim.fos_ReturnBetas(self)

    def ReturnOptimIndex(self):
        return _hdim.fos_ReturnOptimIndex(self)

    def ReturnCoefficients(self):
        return _hdim.fos_ReturnCoefficients(self)

    def ReturnSupport(self):
        return _hdim.fos_ReturnSupport(self)
fos_swigregister = _hdim.fos_swigregister
fos_swigregister(fos)

# This file is compatible with both classic and new-style classes.


